import{_ as t,c as a,o as e,a4 as r}from"./chunks/framework.Cr5OQ4C0.js";const u=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"编程资料/设计模式.md","filePath":"编程资料/设计模式.md"}'),d={name:"编程资料/设计模式.md"},o=r('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><p>设计模式(Design Pattern)是一套被反复使用的、多数人知晓的、经过分类编目的代码设计经验的总结，使用设计模式是为了可重用代码、让代码更容易被他人理解。</p><p>根据其目的可分为创建型、结构型和行为型三种设计模式。</p><ul><li>创建型模式主要用于创建对象。</li><li>结构型模式主要用于处理类或对象的组合。</li><li>行为型模式主要用于描述对类或对象怎样交互和怎样分配职责。</li></ul><p>根据范围，即模式主要是用于处理类之间关系还是处理对象之间的关系，可分为类模式和对象模式两种：</p><ul><li>类模式处理类和子类之间的关系，这些关系通过继承建立，在编译时刻就被确定下来，是属于静态的。</li><li>对象模式处理对象间的关系，这些关系在运行时时刻变化，更具动态性。</li></ul><table><thead><tr><th>目的\\范围</th><th>创建型模式</th><th>结构型模式</th><th>行为型模式</th></tr></thead><tbody><tr><td>类模式</td><td>工厂方法模式</td><td>(类)适配器模式</td><td>解释器模式 模板方法模式</td></tr><tr><td>对象模式</td><td>抽象工厂模式<br>建造者模式<br>原型模式<br>单例模式</td><td>(对象)适配器模式<br>桥接模式<br>组合模式<br>装饰器模式<br>外观模式<br>享元模式<br>代理模式</td><td>职责链模式<br>命令模式<br>迭代器模式<br>中介者模式<br>备忘录模式<br>观察者模式<br>状态模式<br>策略模式<br>访问者模式</td></tr></tbody></table><h2 id="创建型模式" tabindex="-1">创建型模式 <a class="header-anchor" href="#创建型模式" aria-label="Permalink to &quot;创建型模式&quot;">​</a></h2><p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p><h3 id="工厂方法设计模式" tabindex="-1">工厂方法设计模式 <a class="header-anchor" href="#工厂方法设计模式" aria-label="Permalink to &quot;工厂方法设计模式&quot;">​</a></h3><h3 id="抽象工厂设计模式" tabindex="-1">抽象工厂设计模式 <a class="header-anchor" href="#抽象工厂设计模式" aria-label="Permalink to &quot;抽象工厂设计模式&quot;">​</a></h3><h2 id="结构型模式" tabindex="-1">结构型模式 <a class="header-anchor" href="#结构型模式" aria-label="Permalink to &quot;结构型模式&quot;">​</a></h2><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p><h2 id="行为型模式" tabindex="-1">行为型模式 <a class="header-anchor" href="#行为型模式" aria-label="Permalink to &quot;行为型模式&quot;">​</a></h2><p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p>',15),l=[o];function i(h,n,s,b,c,_){return e(),a("div",null,l)}const m=t(d,[["render",i]]);export{u as __pageData,m as default};
